text adventure basic requirements:
    - move around the room - room should be split into sections each section contains different parts of the room
    - objects in the room - a class for intractable objects
    - ability to interact with objects - objects have interaction methods
    - can pick up objects - an inventory class or maybe an array in a player class
    - can use objects on other objects - an important interaction method, only called on objects in inventory

basic plan:
    - have a room, which contains a few objects, the player can interact with them
    - one of the objects is a key another is a door, the door will have a method to open it,
        when you interact with it they tend to call a method that moves you to a new location
        for now it will call the victory method
    - player can look around, see some stuff then pick up the key and leave, expand from there

Rooms:
    each room is initialised with a list of features - i.e. objects -
    along with having a description of the room's layout and any other
    data about the room such as checks that an obstacle has been passed
        that prevent access to an object until the player deals with them

    Rooms need:
        - a text description
        - array of items
        - array of complications
        - map of items to the complication - if any - that block them

    could make each room it's own class that extends the abstract room class so that a room is always initialised the same
    while following a standard template, and moving from room to room would be as simple as replacing one object with another object
    though not (usually) a new object since the player's changes should (usually) remain

complications:
    each complication is created with a description, a variable to store the object that can be used to solve the issue
    a boolean representing whether or not it has been solved, a string that states what it is
    methods for what happens when you try to interact with them - these may need variables for any messages output
    and a method to handle the complications - takes in the item being used on it and sees if it resolves - may need a resolve message

Items:
    each item is initialised with a description and a string that states what it is
    as well as methods for what happens when you interact with them in certain ways - may need variables for any messages output

    - complication can extend item

    added look, touch, and (for fun) lick verbs. only thing left is take, however this requires the inventory.

    wait should add a use method, so instead of obstacle having a resolve could have item have a use method
        this could take in a second parameter for the obstacle, if it is null the object is used alone,
        would need to add a function for using alone and the use with function
        use with will just call the obstacle's resolve function

    should also make item abstract and have each item be it's own class since they will eventually all have different effects
    and currently may sometimes do different things when used

    could consider doing the same for obstacle but I don't feel it is as necessary

    can call use when the user enters a set command and has the item in their inventory
    may want to make each item's itemIs something that can be output directly to the user so that they know what to type for each item
    maybe put them in quotes to highlight them

Player:
    currently will just have an inventory - a fixed size array of items that they are carrying, can expand upon it when the base is complete
        e.g. add health or ways to increase carrying capacity, other details about the player that could change

     will also have methods for altering the inventory such as addToInventory

     was going to add switch in there but maybe instead add that as a use method in item?
     so when you call it on an item it checks that you're holding that item and if so replaces it with the given item

     would be a pain since I need to access the inventory, could pass the player or inventory in I guess

     or could have the method called on the player object and take both items in
        this is preferred, should be easier to understand and keeps inventory management in player.java

      ah but i would also need to take in the room so I could leave the object, makes a bit more sense than giving the player to a switch method

Now that that's done i'll need to test it by creating a room and having a player with restricted inventory - 1 -
try to pick up two items then switch

if i'm going to be creating Rooms and items i'll want to create packages to group them

need a package for Rooms
a package for items
obstacles extend items so maybe have them in a single package, interactivity?, could have subpackages?  stick with one for now and see
player doesn't need it's own package, though later i'll be creating a Game class to keep main simple so maybe they can be grouped?

for now have Rooms and Interaction, player.java imports Rooms.room, Interaction.item and Interaction.obstacle shouldn't need the specified
types i don't think - consider using Interfaces instead of classes - look into how interfaces transfer variables

look into factories cause I just remembered they exist

Notes on testing: as long as the room is initialised correctly,
    - even if there are no blockages the map should map all items to null obstacles - maybe change later for efficiency

then the function would work, however there is an issue:
    I forgot to remove the item from the room when it is added to the player's inventory
    this means that items can be duplicated

so the remove method can't take the object from the room directly without taking it as a parameter
could instead have a wrapper method in room that takes the player and item in - the room could act as the control
for everything that happens in it - the methods that affect the pieces are called as part of room methods
for different situations

room will now need to include player so give it a package of game to store it in - see earlier notes

that now works as intended, now generate a wrapper for switching

back to working on player now that that has been handled, the player can take items and switch one for another
dropping an item can be added later since it is not really necessary just helpful

no other base player requirements that I can think of should merge this with master

now I create room wrapper methods for the item interaction methods
    these currently just call the item interaction method but I can use them for
    things such as player inventory checks for using or licking items etc since these wrappers contain the player object

 Also remember to set up obstacles to override the default item methods
 since while the same actions can be applied to them, obstacles would likely be interacted with
 in different ways, for example you need to pick up items to use or lick them, but you can't pick up obstacles
 also at some point I should let obstacles be blocked by other obstacles

 Also currently using the items directly in methods - this will likely require a method in room, that uses each item's itemIs
 to find the item that it represents, maybe a map maybe there's a better solution

    current idea when generating a room create a map of itemIs : item since the user's text input will use the itemIs directly
    that would mean the input could:
        first be checked to ensure it's a valid input
        then split into the necessary parts - itemIs(s) and the verb mostly
        then use the find method and/or map to get the desired items directly
            so they can be passed into the wrapped methods