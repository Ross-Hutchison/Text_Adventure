text adventure basic requirements:
    - move around the room - room should be split into sections each section contains different parts of the room
    - objects in the room - a class for intractable objects
    - ability to interact with objects - objects have interaction methods
    - can pick up objects - an inventory class or maybe an array in a player class
    - can use objects on other objects - an important interaction method, only called on objects in inventory

basic plan:
    - have a room, which contains a few objects, the player can interact with them
    - one of the objects is a key another is a door, the door will have a method to open it,
        when you interact with it they tend to call a method that moves you to a new location
        for now it will call the victory method
    - player can look around, see some stuff then pick up the key and leave, expand from there

Rooms:
    each room is initialised with a list of features - i.e. objects -
    along with having a description of the room's layout and any other
    data about the room such as checks that an obstacle has been passed
        that prevent access to an object until the player deals with them

    Rooms need:
        - a text description
        - array of items
        - array of complications
        - map of items to the complication - if any - that block them

    could make each room it's own class that extends the abstract room class so that a room is always initialised the same
    while following a standard template, and moving from room to room would be as simple as replacing one object with another object
    though not (usually) a new object since the player's changes should (usually) remain

complications:
    each complication is created with a description, a variable to store the object that can be used to solve the issue
    a boolean representing whether or not it has been solved, a string that states what it is
    methods for what happens when you try to interact with them - these may need variables for any messages output
    and a method to handle the complications - takes in the item being used on it and sees if it resolves - may need a resolve message

Items:
    each item is initialised with a description and a string that states what it is
    as well as methods for what happens when you interact with them in certain ways - may need variables for any messages output

    - complication can extend item

    added look, touch, and (for fun) lick verbs. only thing left is take, however this requires the inventory.

    wait should add a use method, so instead of obstacle having a resolve could have item have a use method
        this could take in a second parameter for the obstacle, if it is null the object is used alone,
        would need to add a function for using alone and the use with function
        use with will just call the obstacle's resolve function

    should also make item abstract and have each item be it's own class since they will eventually all have different effects
    and currently may sometimes do different things when used

    could consider doing the same for obstacle but I don't feel it is as necessary

    can call use when the user enters a set command and has the item in their inventory
    may want to make each item's itemIs something that can be output directly to the user so that they know what to type for each item
    maybe put them in quotes to highlight them

Player:
    currently will just have an inventory - a fixed size array of items that they are carrying, can expand upon it when the base is complete
        e.g. add health or ways to increase carrying capacity, other details about the player that could change

     will also have methods for altering the inventory such as addToInventory

     was going to add switch in there but maybe instead add that as a use method in item?
     so when you call it on an item it checks that you're holding that item and if so replaces it with the given item

     would be a pain since I need to access the inventory, could pass the player or inventory in I guess

     or could have the method called on the player object and take both items in
        this is preferred, should be easier to understand and keeps inventory management in player.java

      ah but i would also need to take in the room so I could leave the object, makes a bit more sense than giving the player to a switch method

Now that that's done i'll need to test it by creating a room and having a player with restricted inventory - 1 -
try to pick up two items then switch

if i'm going to be creating Rooms and items i'll want to create packages to group them

need a package for Rooms
a package for items
obstacles extend items so maybe have them in a single package, interactivity?, could have subpackages?  stick with one for now and see
player doesn't need it's own package, though later i'll be creating a Game class to keep main simple so maybe they can be grouped?

for now have Rooms and Interaction, player.java imports Rooms.room, Interaction.item and Interaction.obstacle shouldn't need the specified
types i don't think - consider using Interfaces instead of classes - look into how interfaces transfer variables

look into factories cause I just remembered they exist

Notes on testing: as long as the room is initialised correctly,
    - even if there are no blockages the map should map all items to null obstacles - maybe change later for efficiency

then the function would work, however there is an issue:
    I forgot to remove the item from the room when it is added to the player's inventory
    this means that items can be duplicated

so the remove method can't take the object from the room directly without taking it as a parameter
could instead have a wrapper method in room that takes the player and item in - the room could act as the control
for everything that happens in it - the methods that affect the pieces are called as part of room methods
for different situations

room will now need to include player so give it a package of game to store it in - see earlier notes

that now works as intended, now generate a wrapper for switching

back to working on player now that that has been handled, the player can take items and switch one for another
dropping an item can be added later since it is not really necessary just helpful

no other base player requirements that I can think of should merge this with master

now I create room wrapper methods for the item interaction methods
    these currently just call the item interaction method but I can use them for
    things such as player inventory checks for using or licking items etc since these wrappers contain the player object

 Also remember to set up obstacles to override the default item methods
 since while the same actions can be applied to them, obstacles would likely be interacted with
 in different ways, for example you need to pick up items to use or lick them, but you can't pick up obstacles
 also at some point I should let obstacles be blocked by other obstacles

 Also currently using the items directly in methods - this will likely require a method in room, that uses each item's itemIs
 to find the item that it represents, maybe a map maybe there's a better solution

    current idea when generating a room create a map of itemIs : item since the user's text input will use the itemIs directly
    that would mean the input could:
        first be checked to ensure it's a valid input
        then split into the necessary parts - itemIs(s) and the verb mostly
        then use the find method and/or map to get the desired items directly
            so they can be passed into the wrapped methods

Before setting up the standard tutorial room I'll need to test obstacle resolution
to do this, i'll create a door object that overrides use to show a win message when it opens and close the program
to open you would use use on it - which i'll need to add the override methods in obstacle.java
then create the door class

an issue:
    the check that the item is held is currently part of the room wrapper for use
    however this means that obstacles passed in would need to be picked up which is not allowed
    so I need to move the check inside the item.java ues method

    but this would require those methods take in the player

    a solution could be that the player would have the interaction methods
    and these could take in an item and call the related method from item


    Could be helpful but as far as I can see rn just seems overcomplicated - added a check for type obstacle that skips
    the inventory check for use

 Now that the basic mechanics are sorted I'll need to set up the actual game part of the game
 main should be mostly empty it should just have:

 a loop for while the game isn't over
 in this loop take in a user input and pass it into a method that makes a move
 this can be from a class dedicated to organising the game's operations
 this will eventually set a value for a variable in game representing the ending message
 when the loop ends this message is output and the game - program - ends

 game will be a class in the Game package
 it will contain variables and methods that determine what the game as a whole does
 e.g process user input and decide which room to load or move to- what method from room is called and on what items

 so the process first before the input process I'll need a set up method
    this will:
    output a brief introductory passage
    generate the tutorial room
    set up the game class so it knows where it is and is ready to carry out player instructions
    output the description of the room

About rooms:
    rooms should stay their own class - though it might make sense to make room item and obstacle interfaces?
        no they can't be interfaces as while those can ensure methods are passed on variables can't be without being static

    rooms CAN be created with a full constructor but have an empty constructor
    that allows for the creation of generic rooms of each type that are always the same
    and specially designed. - this also means that it is much easier to alter a specific room since you just change one file
    also makes it much easier to alter which rooms connect where since you just switch the object type

    so one thing is that doors need to lead too and from places - will need to add an additional value to door which is leadsTo

The Game Process:
    now that the game class can be used to initialise the start of the game I need to set up the processing of UI

    the game will every iteration of the main-while loop take in text from the user
    this text will be checked - format? length? regex??? - as part of, or before processing method??
    after being checked will be processed and the item(s) and verb will be isolated
    these will be used to determine what method is called and on which item

    could check the format before the processing then the actual contents during it

    to check the actual contents I'll need to get the map of Strings to Items for the current room and check it contains the key
    if it does check the verb and use that to decide what method is called

    ISSUE you can look at something when it's in your inventory or in the room
    so i'll need to check both - currently don't remove items from the rooms String,item HM
    need to do make that part of take item room wrapper method

    also need to remove it and from the item list and the map in the switchX_With_Y method
        this method already takes in the room in order to allow the item's to be switched between the room's item array and the player's inventory
        just need to have it also add the key for the new item and remove it for the old item

    now that taking and switching items removes/adds them from the room's Str-item HM I need
    to have the game class check both the room's items and the player's inventory when a
    user tries to interact with an item

    this required me to alter the player method for searching inventory to use the String itemIs to search
    since I can't pass the item in directly if it doesn't exist in the inventory or room

    need a way of searching the inventory - could just go through the array since it will likely be small - like at the largest 20 likely closer to 10 at most -
    or could make it another Map - for now iterate

    OR could make the search return the item or null if it's not there - did this

    having millions of classes for each room and item is a terrible idea tbh
    the benefit they give is god but can be achieved in another way for less cost

    current plan - create two factory classes in the Game package - 1 for item and another for rooms
    they will use methods to create instances of room and item - now no longer abstract -
    in specific ways - this means the rooms are easy to change but removes the need for countless classes

    Now need to set up the processing of switching and using items with obstacles

    need to go back to game.java and create the input parsing for useWith and switchWith

    I could use the split with the centre of the regex that finds verbs then
    check that it was split into three parts - if there aren't three parts the input was invalid
    otherwise process as normal

    could have an issue where

    big key useWith taste chocolate bar

    would be accepted but would not be valid

    also applies to the first check where for example "touch touch" would be allowed

    need to include the condition that each item's description cannot include any of the verbs

    will need to create another String for the verbs to make adding them to the regex easier

    an use [^...] to say capture anything but this so would that work with [^(verbsGroup)]???

    turns out the regex are just terrible in general

    still terrible and I have no idea how to fix them

    working on this part is actually painful and I hate it
    honestly wish it wasn't needed. Seriously it's such a pain

    The first Regex needs to:
        start with one of the verb words
        have a space
        then have any number of other words
        so long as it isn't one of the verb words

    The second regex needs to:
        Start with any number of words that aren't one of the verbs
        followed by a space and either switchWith or useOn
        then any number of words that aren't one of the verbs

    Time for a complete restart methinks

    before restart I had
    ---------------------------------------------------------------

    private final String verbs = "(lookAt|touch|use|taste|take)";
        private final String VERB_OBJECT_INPUT = "^" + verbs + " (?!" + verbs + ")[a-zA-Z]+$";
        private final String ITEM_VERB_ITEM_INPUT = "^[a-zA-Z' ]+ (useOn)|(switchWith) [a-zA-Z' ]+$";
        private final String INVALID_COMMAND_ERR_MSG = "this is not a valid command, please look at the format paragraph";

        private Pattern verbObjectPattern = Pattern.compile(VERB_OBJECT_INPUT);
        private Pattern itemVerbItemPattern = Pattern.compile(ITEM_VERB_ITEM_INPUT);

    ---------------------------------------------------------------

