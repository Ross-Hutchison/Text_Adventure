text adventure basic requirements:
    - move around the room - room should be split into sections each section contains different parts of the room
    - objects in the room - a class for intractable objects
    - ability to interact with objects - objects have interaction methods
    - can pick up objects - an inventory class or maybe an array in a player class
    - can use objects on other objects - an important interaction method, only called on objects in inventory

basic plan:
    - have a room, which contains a few objects, the player can interact with them
    - one of the objects is a key another is a door, the door will have a method to open it,
        when you interact with it they tend to call a method that moves you to a new location
        for now it will call the victory method
    - player can look around, see some stuff then pick up the key and leave, expand from there

rooms:
    each room is initialised with a list of features - i.e. objects -
    along with having a description of the room's layout and any other
    data about the room such as checks that an obstacle has been passed
        that prevent access to an object until the player deals with them

    rooms need:
        - a text description
        - array of items
        - array of complications
        - map of items to the complication - if any - that block them

    could make each room it's own class that extends the abstract room class so that a room is always initialised the same
    while following a standard template, and moving from room to room would be as simple as replacing one object with another object
    though not (usually) a new object since the player's changes should (usually) remain

complications:
    each complication is created with a description, a variable to store the object that can be used to solve the issue
    a boolean representing whether or not it has been solved, a string that states what it is
    methods for what happens when you try to interact with them - these may need variables for any messages output
    and a method to handle the complications - takes in the item being used on it and sees if it resolves - may need a resolve message

Items:
    each item is initialised with a description and a string that states what it is
    as well as methods for what happens when you interact with them in certain ways - may need variables for any messages output

    - complication can extend item

    added look, touch, and (for fun) lick verbs. only thing left is take, however this requires the inventory.

    wait should add a use method, so instead of obstacle having a resolve could have item have a use method
        this could take in a second parameter for the obstacle, if it is null the object is used alone,
        would need to add a function for using alone and the use with function
        use with will just call the obstacle's resolve function

    should also make item abstract and have each item be it's own class since they will eventually all have different effects
    and currently may sometimes do different things when used

    could consider doing the same for obstacle but I don't feel it is as necessary

    can call use when the user enters a set command and has the item in their inventory
    may want to make each item's itemIs something that can be output directly to the user so that they know what to type for each item
    maybe put them in quotes to highlight them